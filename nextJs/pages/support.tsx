import Meta from '@/components/commun/static/Meta';
import Image from 'next/image';

import SupportImg from '@/public/support-img.svg';
import { Input } from '@/components/ui/input';
import { ChangeEvent, SyntheticEvent, useState } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import Spinner from '@/components/commun/static/spinner';
import { trpc } from '@/utils/trpc';
import Toast from '@/components/commun/static/Toast';

type FormFields = {
  email: string;
  subject: string;
  message: string;
};
const defaultFormFields = {
  email: '',
  subject: '',
  message: '',
};
const Support = () => {
  const [formFields, setFormFields] = useState<FormFields>(defaultFormFields);
  const [selectedTag, setSelectedTag] = useState<string>('');

  const {
    mutateAsync: opneTicket,
    isLoading,
    isError,
    error,
  } = trpc.tickets.add.useMutation();

  const handleChange = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;

    setFormFields((prev) => {
      return { ...prev, [name]: value };
    });
  };

  const handleSubmit = async (e: SyntheticEvent) => {
    e.preventDefault();

    if (!formFields?.email.length) {
      Toast('warning', 'Please enter a valid email!');
      return;
    }
    if (!formFields?.subject.length) {
      Toast('warning', 'Please write your subject!');
      return;
    }
    if (!formFields?.message.length) {
      Toast('warning', 'Please write your message!');
      return;
    }
    if (!selectedTag) {
      Toast('warning', 'Please select a tag!');
      return;
    }

    try {
      await opneTicket({
        ...formFields,
        tag: selectedTag,
      });

      if (isError) {
        throw error;
      }
      Toast('success', 'Your ticket has been successfully submitted.');
    } catch (error: any) {
      console.log(error);
      if (error.message === 'ticket exist') {
        Toast('error', 'You have already opened a ticket.');
        return;
      }
      Toast('error', 'There was an error processing your request!');
    }
  };

  return (
    <>
      <Meta title="Co Study" description="Generated by create next app" />
      <div
        className=" w-full h-full flex flex-col justify-start items-center
                 pr-2 pl-2 md:pr-6 md:pl-6 gap-10 pb-20"
      >
        <div className="w-4/6 md:w-2/6 h-auto">
          <Image
            src={SupportImg}
            alt="we are here for you"
            width={100}
            height={100}
            quality={100}
            className="w-full h-full"
          />
        </div>
        <div className=" w-full h-auto md:pr-24 md:pl-24 flex">
          <span className="text-2xl md:text-4xl font-bold rotate-[20deg] mr-2 ml-2 text-black">
            +
          </span>
          <p className="text-xl md:text-3xl font-bold text-[#8449BF]">
            Troubleshooting Tips
          </p>
        </div>
        <div
          className=" w-full h-auto pr-4 pl-4 md:pr-28 md:pl-28 flex flex-col justify-center items-start
            gap-3"
        >
          <p className="text-md md:text-lg text-black font-bold">
            Login Issues
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> Provide steps to reset
            passwords, check for correct login credentials, and clear browser
            cache if necessary. Offer guidance on enabling two-factor
            authentication (2FA) for enhanced security.
          </p>
          <p className="ttext-md md:text-lg text-black font-bold">
            Slow Page Load Times
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> Instruct users to check
            their internet connection, clear browser cache, and ensure they are
            using a compatible browser. You can also recommend trying a
            different device or checking for background applications that might
            be using up bandwidth.
          </p>
          <p className="text-md md:text-lg text-black font-bold">
            Unable to Download Files
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> I Walk users through
            the file download process, ensuring they are using supported file
            formats and sizes. Verify if their internet connection is stable,
            and suggest using an alternative browser if the issue persists.
          </p>
          <p className="text-md md:text-lg text-black font-bold">
            Lost Data or Content
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> Advise users on data
            backup practices and explain how to retrieve content from their
            account's backup if applicable. Encourage regular manual backups and
            educate them on the importance of saving work frequently.
          </p>
          <p className="text-lg text-black font-bold">
            Inability to Join Study Rooms
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> Offer instructions on
            how to join study rooms, including troubleshooting steps for common
            issues like browser compatibility, cookies, and ensuring the room is
            not at capacity. Suggest trying again at a different time.
          </p>{' '}
          <p className="text-md md:text-lg text-black font-bold">
            Notification or Email Issues
          </p>
          <p className="text-sm md:text-md text-black font-normal">
            <span className="font-bold">Solution:</span> Explain how to manage
            notification preferences within their account settings. Instruct
            users to check their spam or junk folder for missed emails and add
            your domain to their email whitelist.
          </p>
        </div>
        <div className="w-full h-auto mt-4 md:mt-12 pr-4 pl-4 md:pr-32 md:pl-32 flex flex-col justify-center items-center">
          <Label className="text-2xl md:text-4xl  font-semibold w-full text-center">
            Contact Us!
          </Label>
          <p className="md:w-4/5  text-xs md:text-lg text-center">
            Feel free to share your thoughts and opinions, doubts and concerns
            and we will get back at you as soon as possible. We are waiting for
            you feedback!
          </p>
        </div>
        <form
          className="w-[90%] md:w-[450px] h-auto flex flex-col justify-start items-center gap-4
        rounded-md border-[1px] border-slate-200 p-4 bg-slate-50"
          onSubmit={handleSubmit}
        >
          <Label className="text-md font-semibold w-full">Email</Label>
          <Input
            type="text"
            name="email"
            placeholder="Email"
            value={formFields?.email}
            onChange={handleChange}
          />
          <Label className="text-md font-semibold w-full">Subject</Label>
          <Input
            type="text"
            name="subject"
            placeholder="Subject"
            value={formFields?.subject}
            onChange={handleChange}
          />
          <div className="w-full flex flex-wrap justify-start gap-3 mt-4">
            {tags.map((tag, idx) => {
              return (
                <p
                  key={idx}
                  className={`flex flex-row justify-center items-center  w-auto h-8
                    text-sm font-semibold  pr-3 pl-3 
                    rounded-full hover:cursor-pointer
                    ${
                      selectedTag === tag
                        ? 'text-white bg-[#8449BF]'
                        : 'text-slate-500 bg-slate-100'
                    }`}
                  onClick={() =>
                    setSelectedTag((prev) => {
                      if (prev === tag) {
                        return '';
                      }
                      return tag;
                    })
                  }
                >
                  {tag}
                </p>
              );
            })}
          </div>
          <Label className="text-md font-semibold w-full resize-none">
            Message
          </Label>
          <Textarea
            name="message"
            value={formFields?.message}
            onChange={handleChange}
            className="resize-none"
          />
          <Button
            className="w-auto h-10 text-white text-lg
              font-semibold bg-black border-2 border-[#1D1D1F] hover:border-[#8449BF]
              hover:bg-[#8449BF] hover:text-white flex justify-center items-center gap-2"
            type="submit"
          >
            {isLoading ? (
              <>
                {' '}
                <Spinner className="text-white h-6 w-6" />
                <p className="font-semibold">Saving...</p>
              </>
            ) : (
              'Submit'
            )}
          </Button>
        </form>
      </div>
    </>
  );
};
export default Support;

const tags = ['Bug', 'Issue', 'Authentication', 'Others'];
